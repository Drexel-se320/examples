plugins {
    id 'java'
    id 'jacoco'
    id "com.github.spotbugs" version "5.0.12"

    // Uncomment to run Checker Framework
    //id 'org.checkerframework' version '0.6.2'

    // Java Microbenchmark Harness
    id "me.champeau.jmh" version '0.6.6'
}

repositories {
    mavenCentral()
}

dependencies {
    // Guava for contracts
    implementation 'com.google.guava:guava:32.1.2-jre'

    // Apache Commons for silly things like pairs
    implementation 'org.apache.commons:commons-lang3:3.11'

    // jqwik for property-based testing
    testImplementation "net.jqwik:jqwik:1.8.0"

    // Hamcrest matchers
    testImplementation 'org.hamcrest:hamcrest:2.2'
    
    // JUnit for tests
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.10.0"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.10.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.10.0"

    testImplementation "org.mockito:mockito-core:3.12.4"

    // Selenium
    //compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'

//    // Checker framework
//    compileOnly 'org.checkerframework:checker-qual:3.7.0'
//    testCompileOnly 'org.checkerframework:checker-qual:3.7.0'
//    checkerFramework 'org.checkerframework:checker:3.7.0'
}

test {
    useJUnitPlatform {
        includeEngines 'jqwik', 'junit-jupiter'
    }
    testLogging {
        events "passed", "skipped", "failed"
	exceptionFormat "short"
    }
}
compileTestJava {
	options.compilerArgs += '-parameters'
	options.encoding = 'UTF-8'
}

jacoco {
    toolVersion = "0.8.9"
}
// This task only runs if 'test' has already run, i.e., "gradle test jacocoTestReport"
jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.destination = file("${buildDir}/reports/coverage")
    }
}

tasks.withType(Test) {
    // Enable assertions (-ea) for tests
    enableAssertions = true
}

// This task only runs if 'test' has already run, i.e., "gradle test jacocoTestCoverageVerification"
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.99
            }
        }

        rule {
            enabled = true
            element = 'CLASS'
            includes = ['edu.drexel.se320.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}


